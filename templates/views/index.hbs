<!DOCTYPE html>
<html lang="en">

<head>
   {{>headerlinks}}
</head>

<body>

{{>navbar}}
    <!-- MAIN HEADER -->
    <div class="container-fluid main_header">
        <div class="row">
            <!-- LEFT SIDE DIV -->
            <div class="col-md-10 col-12 mx-auto">
                <div class="row">
                    <div class="col-md-6 col-12 main_header_left">
                        <p>Welcome to OS VIRTUAL WEB APP</p>
                        <h1>Explore Various <span class="text_color"><h1>OS SCHEDULING ALGORITHMS</span>
                        <br>
                        <a href="/cardos"><button>Explore Now</button></a>
                    </div>

                    <!-- RIGHT SIDE DIV -->
                    <div class="col-md-6 col-12 main_header_right">
                        <div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
                            <div style="border-radius:3rem" class="carousel-inner">
                                <div class="carousel-item active">
                                    <img style="border-radius:3rem" src="img/bg1.png" class="w-100" alt="...">
                                </div>
                                <div class="carousel-item">
                                    <img style="border-radius:3rem"  src="img/bg2.jpg" class="w-100" alt="...">
                                </div>
                                <div class="carousel-item">
                                    <img style="border-radius:3rem" src="img/bg3.png" class="w-100" alt="...">
                                </div>
                            </div>
                            <button class="carousel-control-prev" type="button" data-target="#carouselExampleControls"
                                data-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="sr-only">Previous</span>
                            </button>
                            <button class="carousel-control-next" type="button" data-target="#carouselExampleControls"
                                data-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="sr-only">Next</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{{!-- <div class="chat_icon">
    <img src="img/chat.jpg" alt="" style="width: 60px; height: 60px; border-radius: 50%;">
  </div>
  <div class="chat_box">
    <div id="chat" class="conv-form-wrapper">
      <form action="" method="GET" class="hidden">
        <select name="category" data-conv-question="Hello! How can I help you!">
          <option value="Doc">I want Study</option>
          <option value="Nothing">Nothing!</option>
        </select>
        <div data-conv-fork="category">
          <div data-conv-case="Nothing">
            <input type="text" data-conv-question="Thanks For Visiting!">
          </div>
          <div data-conv-case="Doc">
            <select name="category" data-conv-question="Study Algorithm with us!">
              <option value="round">Round-Robin</option>
              <option value="MRU">MRU</option>
              <option value="Bankers">Bankers</option>
              <option value="Scan">Scan/Scan-C</option>
            </select>
            <div data-conv-fork="category">
              <div data-conv-case="round">
                <select name="category"
                  data-conv-question="Round robin is a scheduling algorithm that assigns time slices to each process in a cyclic order, regardless of the priority of the process. Each process is given a fixed amount of time to execute before the algorithm moves on to the next process in the queue. If a process finishes executing within its allocated time slice, it is removed from the queue. If a process does not finish within its time slice, it is preempted and placed at the back of the queue, where it will receive another time slice during the next cycle. Round robin is a simple and fair scheduling algorithm that ensures all processes get a chance to execute, but it may not be the best choice for systems with real-time constraints or high-priority processes." "For more Information Check this :
                  Video: https://www.youtube.com/watch?v=TxjIlNYRZ5M 
                  Article: 
                  1.https://www.javatpoint.com/os-round-robin-scheduling-algorithm 
                  2.https://www.scaler.com/topics/round-robin-scheduling-in-os/
                  3. https://www.geeksforgeeks.org/program-for-round-robin-scheduling-for-the-same-arrival-time/">
                  <option value="MRU">MRU</option>
                  <option value="Bankers">Bankers</option>
                  <option value="Scan">Scan/Scan-C</option>
                  <option value="end">End</option>
                </select>
              </div>
              <div data-conv-case="MRU">
                <select name="category"
                  data-conv-question="MRU, or Most Recently Used, is a page replacement algorithm used by the operating system to manage memory when a page fault occurs. MRU replaces the page that has not been accessed for the longest period of time, based on the assumption that pages that have been accessed recently are more likely to be accessed again in the near future. MRU keeps track of the last time each page was accessed, and when a page fault occurs, it replaces the page that was accessed the longest time ago. While MRU can be effective in reducing the number of page faults, it can also lead to unnecessary page replacements if a page is accessed infrequently but still needed in the future.">
                  <option value="round">Round-Robin</option>
                  <option value="Bankers">Bankers</option>
                  <option value="Scan">Scan/Scan-C</option>
                  <option value="end">End</option>
                </select>
              </div>
              <div data-conv-case="Bankers">
                <select name="category"
                  data-conv-question="Banker's algorithm is a deadlock avoidance algorithm used in operating systems to ensure that the resources required by a process can be safely allocated without causing a deadlock. It works by simulating the allocation of resources to all processes in the system, and determining whether or not this allocation would lead to a safe state. A safe state is one where all processes can complete their execution without getting stuck in a deadlock. If the requested resource allocation would lead to a safe state, it is granted. Otherwise, the process is blocked until the requested resources become available. Banker's algorithm is a conservative approach to resource allocation, but it can be effective in preventing deadlocks in systems with limited resources.">
                  <option value="round">Round-Robin</option>
                  <option value="MRU">MRU</option>
                  <option value="Scan">Scan/Scan-C</option>
                  <option value="end">End</option>
                </select>
              </div>
              <div data-conv-case="Scan">
                <select name="category"
                  data-conv-question="Scan and C-Scan are disk scheduling algorithms used in operating systems to control the order in which disk read/write operations are executed. The Scan algorithm works by moving the disk arm in one direction, servicing all the requests in that direction before reversing direction and servicing the requests in the opposite direction. The C-Scan algorithm is similar, but instead of reversing direction at the end of the disk, it returns to the beginning of the disk and starts servicing requests again. Both algorithms can be effective in reducing disk head movements and improving disk access times, but they may not be suitable for all disk access patterns. In C language, the implementation of these algorithms involves creating a request queue, sorting the requests in order of increasing disk cylinder number, and then iterating through the queue to service each request in the appropriate order.">
                  <option value="round">Round-Robin</option>
                  <option value="MRU">MRU</option>
                  <option value="Bankers">Bankers</option>
                  <option value="end">End</option>
                </select>
              </div>
              <div data-conv-case="end">
                <input type="hidden" data-conv-question="Thanks For Visiting!">
              </div>
            </div>
          </div>
      </form>
    </div>
  </div>
  <!-- chatbot--> --}}
    <!-- MAIN FOOTER -->
   {{>footer}}
</body>

</html>