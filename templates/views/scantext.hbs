<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scan / Scan-C algorithm Info</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
    <link rel="icon" type="image/x-icon" href="img/logo4.jpg">
    <style>
        * {
            box-sizing: border-box;
        }

        h1 {
            text-align: center;
            font-size: 60px;
            color: rgb(0, 0, 0);
        }

        body {
            padding: 80px;
            border-image-repeat: fill;
            background-color: #ffffff;
            margin: 0%;

            border: rgb(21, 114, 253) 12px solid;
        }

        div {
            font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
            color: rgb(0, 0, 0);
            font-weight: 500;
            font-weight: bolder;
            font-size: large;
            text-align: left;
        }

        .accordion-button {
            font-size: 20px;
            font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
            font-weight: 400;
            color: black;
        }

        .accordion-button:not(.collapsed) {
            color: inherit;
            background: rgb(0, 47, 255);
            color: white;
        }

        .accordion-button:not(.collapsed)::after {
            filter: brightness(0%) invert(70%);
        }

        .accordion-button:focus {
            box-shadow: inherit;
        }

        p {
            font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
            color: rgb(0, 0, 0);
            font-size: larger;
            text-align: justify;
            margin-top: 50px;
        }

        @keyframes round-robin {
            0% {
                transform: translateX(0);
            }

            100% {
                transform: translateX(-60px);
            }
        }

        h2 {
            color: rgb(0, 67, 250);
            font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
            font-size: 30px;
        }

        table {
            border-collapse: collapse;
            width: 100%;
        }

        th,
        td {
            text-align: left;
            padding: 8px;
            border: 1px solid black;
        }

        th {
            background-color: #a5adf7;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
    </style>
</head>

<body>
    <nav aria-label="Page navigation example">
        <a class="navbar-brand" href="/cardos">
            <script src="https://cdn.lordicon.com/ritcuqlt.js"></script>
            <lord-icon src="https://cdn.lordicon.com/hjbsbdhw.json" trigger="hover" style="width:45px;height:45px">
            </lord-icon>
        </a>
        <ul class="pagination justify-content-center">
            <li class="page-item active">
                <a class="page-link">Documentation</a>
            </li>
            <li class="page-item">
                <a class="page-link" href="/svideo">Video Explanation</a>
            </li>
        </ul>
    </nav><br>
    <br>
    <br>

    <h1> <span class="multiText">Scan / C-Scan algorithm </span>
    </h1>
    <br>
    <h2> SCAN (Elevator) algorithm </h2>
    <p>In SCAN disk scheduling algorithm, head starts from one end of the disk and moves towards the other end,
        servicing
        requests in between one by one and reach the other end. Then the direction of the head is reversed and the
        process
        continues as head continuously scan back and forth to access the disk. So, this algorithm works as an elevator
        and
        hence also known as the elevator algorithm. As a result, the requests at the midrange are serviced more and
        those
        arriving behind the disk arm will have to wait.</p>
    <br>
    <h2>
        C-SCAN (Circular Elevator) Disk Scheduling Algorithm
    </h2>
    <p>The circular SCAN (C-SCAN) scheduling algorithm is a modified version of the SCAN disk scheduling algorithm that
        deals with the inefficiency of the SCAN algorithm by servicing the requests more uniformly. Like SCAN (Elevator
        Algorithm) C-SCAN moves the head from one end servicing all the requests to the other end. However, as soon as
        the
        head reaches the other end, it immediately returns to the beginning of the disk without servicing any requests
        on
        the return trip (see chart below) and starts servicing again once reaches the beginning. This is also known as
        the
        “Circular Elevator Algorithm” as it essentially treats the cylinders as a circular list that wraps around from
        the
        final cylinder to the first one.
    </p>
    <h2>Example</h2>
    <p>
        Let's take a disk with 180 tracks (0-179) and the disk queue having input/output requests in the following
        order:
        75, 90, 40, 135, 50, 170, 65, 10. The initial head position of the Read/Write head is 45 and will move on the
        left-hand side. Find the total number of track movements of the Read/Write head using the SCAN algorithm.
    </p>

    <h2>Scan algorithm Diagram</h2> <br>
    <img src="img/scan disk-scheduling-algorithm.png" style="text-align: center; border-radius: 20px;" alt="">
    <br><br>
    <p>Total head movements, <br>

        Initial head point is 45, <br>

        = (45-40) + (40-10) + (10-0) + (50-0) + (65-50) + (75-65) + (90-75) + (135-90) + (170-135)

        = 5 + 30 +10 +50 +15 + 10 +15 + 45 + 35 <br>

        = 215</p>
    <h2>Scan - C algorithm Diagram</h2>
    <br>
    <img src=img/c-scan-disk-scheduling-algorithm2.png alt="">
    <p>Total head movements,
        <br>
        The initial head point is 45, <br>

        = (50-45) + (65-50) + (75-65) + (90-75) + (135-90) + (170-135) + (179-170) + (179-0) + (10-0) + (40-10)

        = 5 + 15 + 10 +15 + 45 + 35 + 9 +179 + 10 + 30

        = 353
    </p> <br>
    <h2>SCAN vs C-SCAN Disk Scheduling Algorithm Comparison</h2>
    <br>
    <table>
        <tr>
            <th>SCAN Disk-Scheduling</th>
            <th>C-SCAN Disk-Scheduling</th>

        </tr>
        <tr>
            <td>It is also known as the Elevator algorithm.</td>
            <td>It is also known as the Circular Elevator algorithm.</td>
        </tr>
        <tr>
            <td>It offers a longer waiting time to request locations.</td>
            <td>It offers a uniform waiting time to request locations.</td>
        </tr>
        <tr>
            <td>It contains higher throughput and gives a low variance response time.</td>
            <td>It gives a better response time.</td>
        </tr>
        <tr>
            <td>Its services all the requests in both forward and reversed directions.</td>
            <td>Its services the requests in only a single direction only.</td>
        </tr>
        <tr>
            <td>
                In the SCAN algorithm example, the head moves from 45 to the left, servicing all requests in that
                direction
                until it reaches the left end, and it changes the head position to the right end, processing all
                requests from 0
                to 179.
            </td>
            <td>
                In the C-SCAN algorithm example, the head moves from 45 to the right-hand side and serves all requests
                until it
                reaches the right end, and then it doesn't reverse its direction but rather jumps to the other end of
                the disk
                and serves the requests on its right end.
            </td>
        </tr>
    </table>
    <br>
    <br>
    <div class="accordion accordion-flush" id="accordionFlushExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="flush-headingOne">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                    data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                    SCAN Algorithm
                </button>
            </h2>
            <div id="flush-collapseOne" class="accordion-collapse collapse" aria-labelledby="flush-headingOne"
                data-bs-parent="#accordionFlushExample">
                <div class="accordion-body">

                    1. Let Request array represents an array storing indexes of tracks that have been requested in
                    ascending order
                    of their time of arrival. ‘head’ is the position of disk head.
                    <br> 2. Let direction represents whether the head is moving towards left or right.
                    <br> 3. In the direction in which head is moving service all tracks one by one.
                    <br> 4. Calculate the absolute distance of the track from the head.
                    <br> 5. Increment the total seek count with this distance.
                    <br> 6. Currently serviced track position now becomes the new head position.
                    <br> 7. Go to step 3 until we reach at one of the ends of the disk.
                    <br> 8. If we reach at the end of the disk reverse the direction and go to step 2 until all tracks
                    in request
                    array have not been serviced.

                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="flush-headingTwo">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                    data-bs-target="#flush-collapseTwo" aria-expanded="false" aria-controls="flush-collapseTwo">
                    C-SCAN Algorithm
                </button>
            </h2>
            <div id="flush-collapseTwo" class="accordion-collapse collapse" aria-labelledby="flush-headingTwo"
                data-bs-parent="#accordionFlushExample">
                <div class="accordion-body">1. Let Request array represents an array storing indexes of tracks that have
                    been
                    requested in ascending order of their time of arrival. ‘head’ is the position of disk head.
                    <br> 2. The head services only in the right direction from 0 to the size of the disk.
                    <br> 3. While moving in the left direction do not service any of the tracks.
                    <br> 4. When we reach the beginning(left end) reverse the direction.
                    <br> 5. While moving in the right direction it services all tracks one by one.
                    <br> 6. While moving in the right direction calculate the absolute distance of the track from the
                    head.
                    <br> 7. Increment the total seek count with this distance.
                    <br> 8. Currently serviced track position now becomes the new head position.
                    <br> 9. Go to step 6 until we reach the right end of the disk.
                    <br> 10. If we reach the right end of the disk reverse the direction and go to step 3 until all
                    tracks in the
                    request array have not been serviced.

                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="flush-headingFour">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                    data-bs-target="#flush-collapseFour" aria-expanded="false" aria-controls="flush-collapseFour">
                    Advantages of both Algorithms
                </button>
            </h2>
            <div id="flush-collapseFour" class="accordion-collapse collapse" aria-labelledby="flush-headingFour"
                data-bs-parent="#accordionFlushExample">
                <div class="accordion-body">Advantages of SCAN (Elevator) algorithm
                    <br> 1. This algorithm is simple and easy to understand.
                    <br> 2. SCAN algorithm have no starvation.
                    <br> 3. This algorithm is better than FCFS Scheduling algorithm
                    <br> Advantages of C-SCAN (Circular Elevator) Disk Scheduling Algorithm:
                    <br> • Works well with moderate to heavy loads.
                    <br> • It provides better response time and uniform waiting time.

                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="flush-headingThree">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                    data-bs-target="#flush-collapseThree" aria-expanded="false" aria-controls="flush-collapseThree">
                    Disadvantages of both Algorithms
                </button>
            </h2>
            <div id="flush-collapseThree" class="accordion-collapse collapse" aria-labelledby="flush-headingThree"
                data-bs-parent="#accordionFlushExample">
                <div class="accordion-body"> Disadvantages of SCAN (Elevator) algorithm
                    <br> 1. More complex algorithm to implement.
                    <br> 2. This algorithm is not fair because it cause long waiting time for the cylinders just visited
                    by the
                    head.
                    <br> 3. It causes the head to move till the end of the disk in this way the requests arriving ahead
                    of the arm
                    position would get immediate service but some other requests that arrive behind the arm position
                    will have to
                    wait for the request to complete.
                    <br> Disadvantages of C-SCAN (Circular Elevator) Disk Scheduling Algorithm:
                    <br> • May not be fair to service requests for tracks at the extreme end.
                    <br> • It has more seek movements as compared to the SCAN Algorithm.

                </div>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/typed.js@2.0.12"></script>
    <script>
        var typingEffect = new Typed(".multiText", {
            strings: ["Scan / C-Scan Algorithm", "Scan /  C-Scan Algorithm", "Scan /  C-Scan Algorithm"],
            loop: true,
            typeSpeed: 20,
            backspeed: 40,
            backDelay: 1400
        }
        )
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"
        crossorigin="anonymous"></script>

    </div>
</body>

</html>